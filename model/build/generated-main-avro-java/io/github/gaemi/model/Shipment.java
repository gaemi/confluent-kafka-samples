/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.github.gaemi.model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** 수송품 */
@org.apache.avro.specific.AvroGenerated
public class Shipment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 723552374098644191L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Shipment\",\"namespace\":\"io.github.gaemi.model\",\"doc\":\"수송품\",\"fields\":[{\"name\":\"sender\",\"type\":{\"type\":\"record\",\"name\":\"Sender\",\"doc\":\"보내는 사람\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"이름\",\"default\":null},{\"name\":\"address1\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"주소\",\"default\":null},{\"name\":\"address2\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"상세주소\",\"default\":null},{\"name\":\"phoneNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"휴대폰번호\",\"default\":null}]},\"doc\":\"보내는 사람\"},{\"name\":\"recipient\",\"type\":{\"type\":\"record\",\"name\":\"Recipient\",\"doc\":\"받는 사람\",\"fields\":[{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"이름\",\"default\":null},{\"name\":\"address1\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"주소\",\"default\":null},{\"name\":\"address2\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"상세주소\",\"default\":null},{\"name\":\"phoneNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"휴대폰번호\",\"default\":null}]},\"doc\":\"받는 사람\"},{\"name\":\"contents\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"doc\":\"내용물\",\"default\":[]},{\"name\":\"charge\",\"type\":\"long\",\"doc\":\"배송비\",\"default\":0},{\"name\":\"paymentMethod\",\"type\":{\"type\":\"enum\",\"name\":\"PaymentMethod\",\"symbols\":[\"Cash\",\"CreditCard\",\"COD\"]},\"doc\":\"지불수단\",\"default\":\"Cash\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** 보내는 사람 */
   private io.github.gaemi.model.Sender sender;
  /** 받는 사람 */
   private io.github.gaemi.model.Recipient recipient;
  /** 내용물 */
   private java.util.List<java.lang.String> contents;
  /** 배송비 */
   private long charge;
  /** 지불수단 */
   private io.github.gaemi.model.PaymentMethod paymentMethod;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Shipment() {}

  /**
   * All-args constructor.
   * @param sender 보내는 사람
   * @param recipient 받는 사람
   * @param contents 내용물
   * @param charge 배송비
   * @param paymentMethod 지불수단
   */
  public Shipment(io.github.gaemi.model.Sender sender, io.github.gaemi.model.Recipient recipient, java.util.List<java.lang.String> contents, java.lang.Long charge, io.github.gaemi.model.PaymentMethod paymentMethod) {
    this.sender = sender;
    this.recipient = recipient;
    this.contents = contents;
    this.charge = charge;
    this.paymentMethod = paymentMethod;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sender;
    case 1: return recipient;
    case 2: return contents;
    case 3: return charge;
    case 4: return paymentMethod;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sender = (io.github.gaemi.model.Sender)value$; break;
    case 1: recipient = (io.github.gaemi.model.Recipient)value$; break;
    case 2: contents = (java.util.List<java.lang.String>)value$; break;
    case 3: charge = (java.lang.Long)value$; break;
    case 4: paymentMethod = (io.github.gaemi.model.PaymentMethod)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sender' field.
   * @return 보내는 사람
   */
  public io.github.gaemi.model.Sender getSender() {
    return sender;
  }


  /**
   * Gets the value of the 'recipient' field.
   * @return 받는 사람
   */
  public io.github.gaemi.model.Recipient getRecipient() {
    return recipient;
  }


  /**
   * Gets the value of the 'contents' field.
   * @return 내용물
   */
  public java.util.List<java.lang.String> getContents() {
    return contents;
  }


  /**
   * Gets the value of the 'charge' field.
   * @return 배송비
   */
  public java.lang.Long getCharge() {
    return charge;
  }


  /**
   * Gets the value of the 'paymentMethod' field.
   * @return 지불수단
   */
  public io.github.gaemi.model.PaymentMethod getPaymentMethod() {
    return paymentMethod;
  }


  /**
   * Creates a new Shipment RecordBuilder.
   * @return A new Shipment RecordBuilder
   */
  public static io.github.gaemi.model.Shipment.Builder newBuilder() {
    return new io.github.gaemi.model.Shipment.Builder();
  }

  /**
   * Creates a new Shipment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Shipment RecordBuilder
   */
  public static io.github.gaemi.model.Shipment.Builder newBuilder(io.github.gaemi.model.Shipment.Builder other) {
    return new io.github.gaemi.model.Shipment.Builder(other);
  }

  /**
   * Creates a new Shipment RecordBuilder by copying an existing Shipment instance.
   * @param other The existing instance to copy.
   * @return A new Shipment RecordBuilder
   */
  public static io.github.gaemi.model.Shipment.Builder newBuilder(io.github.gaemi.model.Shipment other) {
    return new io.github.gaemi.model.Shipment.Builder(other);
  }

  /**
   * RecordBuilder for Shipment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Shipment>
    implements org.apache.avro.data.RecordBuilder<Shipment> {

    /** 보내는 사람 */
    private io.github.gaemi.model.Sender sender;
    private io.github.gaemi.model.Sender.Builder senderBuilder;
    /** 받는 사람 */
    private io.github.gaemi.model.Recipient recipient;
    private io.github.gaemi.model.Recipient.Builder recipientBuilder;
    /** 내용물 */
    private java.util.List<java.lang.String> contents;
    /** 배송비 */
    private long charge;
    /** 지불수단 */
    private io.github.gaemi.model.PaymentMethod paymentMethod;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.github.gaemi.model.Shipment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sender)) {
        this.sender = data().deepCopy(fields()[0].schema(), other.sender);
        fieldSetFlags()[0] = true;
      }
      if (other.hasSenderBuilder()) {
        this.senderBuilder = io.github.gaemi.model.Sender.newBuilder(other.getSenderBuilder());
      }
      if (isValidValue(fields()[1], other.recipient)) {
        this.recipient = data().deepCopy(fields()[1].schema(), other.recipient);
        fieldSetFlags()[1] = true;
      }
      if (other.hasRecipientBuilder()) {
        this.recipientBuilder = io.github.gaemi.model.Recipient.newBuilder(other.getRecipientBuilder());
      }
      if (isValidValue(fields()[2], other.contents)) {
        this.contents = data().deepCopy(fields()[2].schema(), other.contents);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.charge)) {
        this.charge = data().deepCopy(fields()[3].schema(), other.charge);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[4].schema(), other.paymentMethod);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Shipment instance
     * @param other The existing instance to copy.
     */
    private Builder(io.github.gaemi.model.Shipment other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sender)) {
        this.sender = data().deepCopy(fields()[0].schema(), other.sender);
        fieldSetFlags()[0] = true;
      }
      this.senderBuilder = null;
      if (isValidValue(fields()[1], other.recipient)) {
        this.recipient = data().deepCopy(fields()[1].schema(), other.recipient);
        fieldSetFlags()[1] = true;
      }
      this.recipientBuilder = null;
      if (isValidValue(fields()[2], other.contents)) {
        this.contents = data().deepCopy(fields()[2].schema(), other.contents);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.charge)) {
        this.charge = data().deepCopy(fields()[3].schema(), other.charge);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[4].schema(), other.paymentMethod);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'sender' field.
      * 보내는 사람
      * @return The value.
      */
    public io.github.gaemi.model.Sender getSender() {
      return sender;
    }

    /**
      * Sets the value of the 'sender' field.
      * 보내는 사람
      * @param value The value of 'sender'.
      * @return This builder.
      */
    public io.github.gaemi.model.Shipment.Builder setSender(io.github.gaemi.model.Sender value) {
      validate(fields()[0], value);
      this.senderBuilder = null;
      this.sender = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sender' field has been set.
      * 보내는 사람
      * @return True if the 'sender' field has been set, false otherwise.
      */
    public boolean hasSender() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'sender' field and creates one if it doesn't exist yet.
     * 보내는 사람
     * @return This builder.
     */
    public io.github.gaemi.model.Sender.Builder getSenderBuilder() {
      if (senderBuilder == null) {
        if (hasSender()) {
          setSenderBuilder(io.github.gaemi.model.Sender.newBuilder(sender));
        } else {
          setSenderBuilder(io.github.gaemi.model.Sender.newBuilder());
        }
      }
      return senderBuilder;
    }

    /**
     * Sets the Builder instance for the 'sender' field
     * 보내는 사람
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.github.gaemi.model.Shipment.Builder setSenderBuilder(io.github.gaemi.model.Sender.Builder value) {
      clearSender();
      senderBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'sender' field has an active Builder instance
     * 보내는 사람
     * @return True if the 'sender' field has an active Builder instance
     */
    public boolean hasSenderBuilder() {
      return senderBuilder != null;
    }

    /**
      * Clears the value of the 'sender' field.
      * 보내는 사람
      * @return This builder.
      */
    public io.github.gaemi.model.Shipment.Builder clearSender() {
      sender = null;
      senderBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'recipient' field.
      * 받는 사람
      * @return The value.
      */
    public io.github.gaemi.model.Recipient getRecipient() {
      return recipient;
    }

    /**
      * Sets the value of the 'recipient' field.
      * 받는 사람
      * @param value The value of 'recipient'.
      * @return This builder.
      */
    public io.github.gaemi.model.Shipment.Builder setRecipient(io.github.gaemi.model.Recipient value) {
      validate(fields()[1], value);
      this.recipientBuilder = null;
      this.recipient = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'recipient' field has been set.
      * 받는 사람
      * @return True if the 'recipient' field has been set, false otherwise.
      */
    public boolean hasRecipient() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'recipient' field and creates one if it doesn't exist yet.
     * 받는 사람
     * @return This builder.
     */
    public io.github.gaemi.model.Recipient.Builder getRecipientBuilder() {
      if (recipientBuilder == null) {
        if (hasRecipient()) {
          setRecipientBuilder(io.github.gaemi.model.Recipient.newBuilder(recipient));
        } else {
          setRecipientBuilder(io.github.gaemi.model.Recipient.newBuilder());
        }
      }
      return recipientBuilder;
    }

    /**
     * Sets the Builder instance for the 'recipient' field
     * 받는 사람
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.github.gaemi.model.Shipment.Builder setRecipientBuilder(io.github.gaemi.model.Recipient.Builder value) {
      clearRecipient();
      recipientBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'recipient' field has an active Builder instance
     * 받는 사람
     * @return True if the 'recipient' field has an active Builder instance
     */
    public boolean hasRecipientBuilder() {
      return recipientBuilder != null;
    }

    /**
      * Clears the value of the 'recipient' field.
      * 받는 사람
      * @return This builder.
      */
    public io.github.gaemi.model.Shipment.Builder clearRecipient() {
      recipient = null;
      recipientBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'contents' field.
      * 내용물
      * @return The value.
      */
    public java.util.List<java.lang.String> getContents() {
      return contents;
    }

    /**
      * Sets the value of the 'contents' field.
      * 내용물
      * @param value The value of 'contents'.
      * @return This builder.
      */
    public io.github.gaemi.model.Shipment.Builder setContents(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.contents = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'contents' field has been set.
      * 내용물
      * @return True if the 'contents' field has been set, false otherwise.
      */
    public boolean hasContents() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'contents' field.
      * 내용물
      * @return This builder.
      */
    public io.github.gaemi.model.Shipment.Builder clearContents() {
      contents = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'charge' field.
      * 배송비
      * @return The value.
      */
    public java.lang.Long getCharge() {
      return charge;
    }

    /**
      * Sets the value of the 'charge' field.
      * 배송비
      * @param value The value of 'charge'.
      * @return This builder.
      */
    public io.github.gaemi.model.Shipment.Builder setCharge(long value) {
      validate(fields()[3], value);
      this.charge = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'charge' field has been set.
      * 배송비
      * @return True if the 'charge' field has been set, false otherwise.
      */
    public boolean hasCharge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'charge' field.
      * 배송비
      * @return This builder.
      */
    public io.github.gaemi.model.Shipment.Builder clearCharge() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethod' field.
      * 지불수단
      * @return The value.
      */
    public io.github.gaemi.model.PaymentMethod getPaymentMethod() {
      return paymentMethod;
    }

    /**
      * Sets the value of the 'paymentMethod' field.
      * 지불수단
      * @param value The value of 'paymentMethod'.
      * @return This builder.
      */
    public io.github.gaemi.model.Shipment.Builder setPaymentMethod(io.github.gaemi.model.PaymentMethod value) {
      validate(fields()[4], value);
      this.paymentMethod = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethod' field has been set.
      * 지불수단
      * @return True if the 'paymentMethod' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'paymentMethod' field.
      * 지불수단
      * @return This builder.
      */
    public io.github.gaemi.model.Shipment.Builder clearPaymentMethod() {
      paymentMethod = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Shipment build() {
      try {
        Shipment record = new Shipment();
        if (senderBuilder != null) {
          record.sender = this.senderBuilder.build();
        } else {
          record.sender = fieldSetFlags()[0] ? this.sender : (io.github.gaemi.model.Sender) defaultValue(fields()[0]);
        }
        if (recipientBuilder != null) {
          record.recipient = this.recipientBuilder.build();
        } else {
          record.recipient = fieldSetFlags()[1] ? this.recipient : (io.github.gaemi.model.Recipient) defaultValue(fields()[1]);
        }
        record.contents = fieldSetFlags()[2] ? this.contents : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.charge = fieldSetFlags()[3] ? this.charge : (java.lang.Long) defaultValue(fields()[3]);
        record.paymentMethod = fieldSetFlags()[4] ? this.paymentMethod : (io.github.gaemi.model.PaymentMethod) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
